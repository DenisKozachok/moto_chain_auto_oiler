#include <HardwareSerial.h>

HardwareSerial gpsSerial(1);
const int RXPin = 16;  // GPS TX ‚Üí —Å—é–¥–∞
const int TXPin = 17;  // GPS RX (–º–æ–∂–Ω–æ –Ω–µ –ø–æ–¥–∫–ª—é—á–∞—Ç—å)

String gpsLine = "";
bool gpsFixed = false;

const int ledPin = 2;            // –í—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π —Å–≤–µ—Ç–æ–¥–∏–æ–¥ ESP32 (GPIO2)
unsigned long lastBlink = 0;
const unsigned long blinkInterval = 10000;  // 10 —Å–µ–∫—É–Ω–¥

void setup() {
  Serial.begin(115200);
  gpsSerial.begin(9600, SERIAL_8N1, RXPin, TXPin);

  pinMode(ledPin, OUTPUT);
  digitalWrite(ledPin, LOW);

  Serial.println("üì° GPS –ø–∞—Ä—Å–µ—Ä —Å –¥–∏–æ–¥–æ–º –∑–∞–ø—É—â–µ–Ω...");
}

void loop() {
  // –ß—Ç–µ–Ω–∏–µ GPS
  while (gpsSerial.available()) {
    char c = gpsSerial.read();
    if (c == '\n') {
      gpsLine.trim();

      if (gpsLine.startsWith("$GNRMC")) {
        parseGNRMC(gpsLine);
      } else if (gpsLine.startsWith("$GNGGA")) {
        parseGNGGA(gpsLine);
      }

      gpsLine = "";
    } else {
      gpsLine += c;
    }
  }

  // –ò–Ω–¥–∏–∫–∞—Ü–∏—è LED –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥, –µ—Å–ª–∏ –Ω–µ—Ç —Å–∏–≥–Ω–∞–ª–∞
  if (!gpsFixed) {
    unsigned long currentMillis = millis();
    if (currentMillis - lastBlink >= blinkInterval) {
      lastBlink = currentMillis;
      digitalWrite(ledPin, HIGH);
      delay(200);
      digitalWrite(ledPin, LOW);
    }
  } else {
    digitalWrite(ledPin, HIGH); 
  }
}

void parseGNRMC(String rmc) {
  String tokens[15];
  splitNMEA(rmc, tokens);

  String fixStatus = tokens[2];

  if (fixStatus == "A") {
    if (!gpsFixed) {
      Serial.println("‚úÖ FIX –ø–æ–ª—É—á–µ–Ω!");
    }
    gpsFixed = true;
  } else {
    if (gpsFixed) {
      Serial.println("‚ùå –ü–æ—Ç–µ—Ä—è FIX.");
    }
    gpsFixed = false;
  }
}

void parseGNGGA(String gga) {
  if (!gpsFixed) return;

  String tokens[15];
  splitNMEA(gga, tokens);

  double lat = nmeaToDecimal(tokens[2]);
  String latDir = tokens[3];
  double lon = nmeaToDecimal(tokens[4]);
  String lonDir = tokens[5];
  int satellites = tokens[7].toInt();
  double altitude = tokens[9].toFloat();

  Serial.println("üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã:");
  Serial.print("  –®–∏—Ä–æ—Ç–∞: "); Serial.print(lat); Serial.print(" "); Serial.println(latDir);
  Serial.print("  –î–æ–ª–≥–æ—Ç–∞: "); Serial.print(lon); Serial.print(" "); Serial.println(lonDir);
  Serial.print("  –°–ø—É—Ç–Ω–∏–∫–æ–≤: "); Serial.println(satellites);
  Serial.print("  –í—ã—Å–æ—Ç–∞: "); Serial.print(altitude); Serial.println(" –º");
  Serial.println("-----------------------------");
}

double nmeaToDecimal(String nmea) {
  if (nmea.length() < 6) return 0.0;
  double raw = nmea.toDouble();
  int degrees = int(raw / 100);
  double minutes = raw - (degrees * 100);
  return degrees + (minutes / 60.0);
}

void splitNMEA(String line, String tokens[]) {
  int idx = 0;
  int last = 0;

  for (int i = 0; i < line.length(); i++) {
    if (line.charAt(i) == ',' || line.charAt(i) == '*') {
      tokens[idx++] = line.substring(last, i);
      last = i + 1;
    }
  }
}
